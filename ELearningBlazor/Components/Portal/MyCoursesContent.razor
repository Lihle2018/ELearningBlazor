@using ELearningBlazor.Services
@using ELearningBlazor.Models
@using ELearningBlazor.Utils
@inject IAuthService AuthService
@inject ICourseService CourseService
@inject IEnrollmentService EnrollmentService
@inject NavigationManager Navigation


<!-- Stats Cards -->
<div class="mb-6 grid grid-cols-1 gap-4 sm:grid-cols-2 lg:grid-cols-4">
    <div class="rounded-2xl border border-gray-200 bg-white p-6 shadow-sm dark:border-gray-800 dark:bg-gray-900">
        <div class="flex items-center gap-3">
            <div class="flex h-10 w-10 items-center justify-center rounded-xl bg-blue-100 dark:bg-blue-900/20">
                <svg class="h-5 w-5 text-blue-600 dark:text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.746 0 3.332.477 4.5 1.253v13C19.832 18.477 18.246 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"></path>
                </svg>
            </div>
            <div>
                <p class="text-sm text-gray-500 dark:text-gray-400">Total</p>
                <p class="text-lg font-bold text-gray-900 dark:text-white">@enrolledCourses.Count</p>
            </div>
        </div>
    </div>

    <div class="rounded-2xl border border-gray-200 bg-white p-6 shadow-sm dark:border-gray-800 dark:bg-gray-900">
        <div class="flex items-center gap-3">
            <div class="flex h-10 w-10 items-center justify-center rounded-xl bg-yellow-100 dark:bg-yellow-900/20">
                <svg class="h-5 w-5 text-yellow-600 dark:text-yellow-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
            </div>
            <div>
                <p class="text-sm text-gray-500 dark:text-gray-400">In Progress</p>
                <p class="text-lg font-bold text-gray-900 dark:text-white">@inProgressCount</p>
            </div>
        </div>
    </div>

    <div class="rounded-2xl border border-gray-200 bg-white p-6 shadow-sm dark:border-gray-800 dark:bg-gray-900">
        <div class="flex items-center gap-3">
            <div class="flex h-10 w-10 items-center justify-center rounded-xl bg-green-100 dark:bg-green-900/20">
                <svg class="h-5 w-5 text-green-600 dark:text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
            </div>
            <div>
                <p class="text-sm text-gray-500 dark:text-gray-400">Completed</p>
                <p class="text-lg font-bold text-gray-900 dark:text-white">@completedCount</p>
            </div>
        </div>
    </div>

    <div class="rounded-2xl border border-gray-200 bg-white p-6 shadow-sm dark:border-gray-800 dark:bg-gray-900">
        <div class="flex items-center gap-3">
            <div class="flex h-10 w-10 items-center justify-center rounded-xl bg-purple-100 dark:bg-purple-900/20">
                <svg class="h-5 w-5 text-purple-600 dark:text-purple-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6"></path>
                </svg>
            </div>
            <div>
                <p class="text-sm text-gray-500 dark:text-gray-400">Avg Progress</p>
                <p class="text-lg font-bold text-gray-900 dark:text-white">@($"{averageProgress:F0}")%</p>
            </div>
        </div>
    </div>
</div>

<!-- Courses Table -->
<div class="rounded-2xl border border-gray-200 bg-white shadow-sm dark:border-gray-800 dark:bg-gray-900">
    <div class="border-b border-gray-200 px-6 py-4 dark:border-gray-700">
        <div class="flex items-center justify-between">
            <h3 class="text-lg font-semibold text-gray-900 dark:text-white">Course List</h3>
            @if (!string.IsNullOrEmpty(selectedFilter) && selectedFilter != "all")
            {
                <span class="rounded-full bg-blue-100 px-3 py-1 text-xs font-medium text-blue-700 dark:bg-blue-900/20 dark:text-blue-300">
                    @selectedFilter.Replace("-", " ") (@filteredCourses.Count)
                </span>
            }
        </div>
    </div>

    @if (filteredCourses.Any())
    {
        <div class="divide-y divide-gray-200 dark:divide-gray-700">
            @foreach (var courseInfo in filteredCourses)
            {
                var course = courseInfo.Course;
                if (course != null)
                {
                    <div class="p-6 hover:bg-gray-50 dark:hover:bg-gray-800/50">
                        <div class="flex items-center gap-4">
                            <!-- Course Image -->
                            <div class="flex-shrink-0">
                                <img src="@ImageHelper.GetImagePath(course.ImgSrc)"
                                     alt="@course.Heading"
                                     class="h-16 w-16 rounded-lg object-cover" />
                            </div>

                            <!-- Course Info -->
                            <div class="flex-1 min-w-0">
                                <div class="flex items-start justify-between">
                                    <div class="flex-1 min-w-0">
                                        <h4 class="truncate text-lg font-semibold text-gray-900 dark:text-white">@course.Heading</h4>
                                        <p class="text-sm text-gray-500 dark:text-gray-400">By @course.Name</p>

                                        <div class="mt-2 flex items-center gap-4 text-sm text-gray-500 dark:text-gray-400">
                                            <div class="flex items-center gap-1">
                                                <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                                </svg>
                                                @course.Duration
                                            </div>
                                            <div class="flex items-center gap-1">
                                                <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.746 0 3.332.477 4.5 1.253v13C19.832 18.477 18.246 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"></path>
                                                </svg>
                                                @course.Classes lessons
                                            </div>
                                            @if (courseInfo.LastAccessed.HasValue)
                                            {
                                                <div class="flex items-center gap-1">
                                                    <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                                                    </svg>
                                                    Last: @courseInfo.LastAccessed.Value.ToString("MMM dd")
                                                </div>
                                            }
                                        </div>
                                    </div>

                                    <!-- Status Badge -->
                                    <div class="flex-shrink-0">
                                        @if (courseInfo.Progress >= 100)
                                        {
                                            <span class="inline-flex items-center rounded-full bg-green-100 px-2.5 py-0.5 text-xs font-medium text-green-800 dark:bg-green-900/20 dark:text-green-300">
                                                <svg class="mr-1 h-3 w-3" fill="currentColor" viewBox="0 0 20 20">
                                                    <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
                                                </svg>
                                                Completed
                                            </span>
                                        }
                                        else if (courseInfo.Progress > 0)
                                        {
                                            <span class="inline-flex items-center rounded-full bg-yellow-100 px-2.5 py-0.5 text-xs font-medium text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-300">
                                                <svg class="mr-1 h-3 w-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                                </svg>
                                                @($"{courseInfo.Progress:F0}")% Complete
                                            </span>
                                        }
                                        else
                                        {
                                            <span class="inline-flex items-center rounded-full bg-gray-100 px-2.5 py-0.5 text-xs font-medium text-gray-600 dark:bg-gray-800 dark:text-gray-400">
                                                <svg class="mr-1 h-3 w-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                                </svg>
                                                Not Started
                                            </span>
                                        }
                                    </div>
                                </div>

                                <!-- Progress Bar -->
                                <div class="mt-3 flex items-center gap-3">
                                    <div class="flex-1">
                                        <div class="flex items-center justify-between text-sm mb-1">
                                            <span class="text-gray-600 dark:text-gray-400">Progress</span>
                                            <span class="font-medium text-gray-900 dark:text-white">@($"{courseInfo.Progress:F0}")%</span>
                                        </div>
                                        <div class="w-full bg-gray-200 rounded-full h-2 dark:bg-gray-700">
                                            <div class="@GetProgressBarClass(courseInfo.Progress) h-2 rounded-full transition-all duration-300"
                                                 style="width: @(courseInfo.Progress)%"></div>
                                        </div>
                                    </div>

                                    <!-- Action Buttons -->
                                    <div class="flex gap-2">
                                        @if (courseInfo.Progress >= 100)
                                        {
                                            <button class="rounded-lg bg-green-600 px-3 py-2 text-sm font-medium text-white hover:bg-green-700 dark:bg-green-500 dark:hover:bg-green-600">
                                                Certificate
                                            </button>
                                            <button class="rounded-lg border border-gray-300 bg-white px-3 py-2 text-sm font-medium text-gray-700 hover:bg-gray-50 dark:border-gray-600 dark:bg-gray-800 dark:text-gray-300 dark:hover:bg-gray-700">
                                                Review
                                            </button>
                                        }
                                        else
                                        {
                                            <button @onclick="@(() => NavigateToCourse(course.Id))" class="rounded-lg bg-blue-600 px-3 py-2 text-sm font-medium text-white hover:bg-blue-700 dark:bg-blue-500 dark:hover:bg-blue-600">
                                                @(courseInfo.Progress > 0 ? "Continue" : "Start")
                                            </button>
                                            <div class="relative">
                                                <button @onclick="@(() => ToggleDropdown(course.Id))" class="rounded-lg border border-gray-300 bg-white p-2 text-gray-400 hover:bg-gray-50 hover:text-gray-600 dark:border-gray-600 dark:bg-gray-800 dark:text-gray-500 dark:hover:bg-gray-700 dark:hover:text-gray-300">
                                                    <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 12h.01M12 12h.01M19 12h.01M6 12a1 1 0 11-2 0 1 1 0 012 0zm7 0a1 1 0 11-2 0 1 1 0 012 0zm7 0a1 1 0 11-2 0 1 1 0 012 0z"></path>
                                                    </svg>
                                                </button>

                                                @if (showDropdownFor == course.Id)
                                                {
                                                    <div class="absolute right-0 top-full z-50 mt-2 w-48 rounded-md border border-gray-200 bg-white shadow-lg dark:border-gray-600 dark:bg-gray-800">
                                                        <div class="py-1">
                                                            <button @onclick="@(() => DeregisterCourse(course.Id))"
                                                                    class="flex w-full items-center gap-2 px-4 py-2 text-sm text-red-600 hover:bg-red-50 dark:text-red-400 dark:hover:bg-red-900/20"
                                                                    disabled="@(isDeregistering && deregisteringCourseId == course.Id)">
                                                                @if (isDeregistering && deregisteringCourseId == course.Id)
                                                                {
                                                                    <svg class="h-4 w-4 animate-spin" fill="none" viewBox="0 0 24 24">
                                                                        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                                                        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                                                    </svg>
                                                                    <span>Removing...</span>
                                                                }
                                                                else
                                                                {
                                                                    <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                                                                    </svg>
                                                                    <span>Deregister Course</span>
                                                                }
                                                            </button>
                                                        </div>
                                                    </div>
                                                }
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }
        </div>
    }
    else
    {
        <div class="flex flex-col items-center justify-center py-16 text-center">
            <div class="mx-auto flex h-12 w-12 items-center justify-center rounded-xl bg-gray-100 dark:bg-gray-800">
                <svg class="h-6 w-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.746 0 3.332.477 4.5 1.253v13C19.832 18.477 18.246 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"></path>
                </svg>
            </div>
            <h3 class="mt-4 text-lg font-semibold text-gray-900 dark:text-white">
                @if (selectedFilter == "all")
                {
                    <text>No courses enrolled</text>
                }
                else
                {
                    <text>No @selectedFilter.Replace("-", " ") courses</text>
                }
            </h3>
            <p class="mt-2 text-sm text-gray-500 dark:text-gray-400">
                @if (selectedFilter == "all")
                {
                    <text>Start your learning journey by enrolling in a course.</text>
                }
                else
                {
                    <text>Try changing the filter to see more courses.</text>
                }
            </p>
            <div class="mt-6">
                <button class="rounded-lg bg-blue-600 px-4 py-2 text-sm font-medium text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2">
                    Browse Courses
                </button>
            </div>
        </div>
    }
</div>

@code {
    private List<EnrolledCourse> enrolledCourses = new();
    private List<EnrolledCourse> filteredCourses = new();
    private string selectedFilter = "all";
    private int inProgressCount = 0;
    private int completedCount = 0;
    private double averageProgress = 0;
    private int? showDropdownFor = null;
    private bool isDeregistering = false;
    private int? deregisteringCourseId = null;

    protected override async Task OnInitializedAsync()
    {
        await LoadCoursesData();
        ApplyFilter();
    }

    private async Task LoadCoursesData()
    {
        if (AuthService.CurrentUser == null) return;

        // Get enrollments from API
        enrolledCourses = await EnrollmentService.GetMyEnrollmentsAsync();

        // Calculate stats
        inProgressCount = enrolledCourses.Count(ec => ec.Progress > 0 && ec.Progress < 100);
        completedCount = enrolledCourses.Count(ec => ec.Progress >= 100);
        averageProgress = enrolledCourses.Any() ? enrolledCourses.Average(ec => ec.Progress) : 0;
    }

    private void ApplyFilter()
    {
        filteredCourses = selectedFilter switch
        {
            "in-progress" => enrolledCourses.Where(ec => ec.Progress > 0 && ec.Progress < 100).ToList(),
            "completed" => enrolledCourses.Where(ec => ec.Progress >= 100).ToList(),
            "not-started" => enrolledCourses.Where(ec => ec.Progress == 0).ToList(),
            _ => enrolledCourses
        };
    }

    private string GetProgressBarClass(double progress)
    {
        return progress switch
        {
            >= 100 => "bg-green-600 dark:bg-green-500",
            >= 75 => "bg-blue-600 dark:bg-blue-500",
            >= 50 => "bg-yellow-500 dark:bg-yellow-400",
            > 0 => "bg-orange-500 dark:bg-orange-400",
            _ => "bg-gray-300 dark:bg-gray-600"
        };
    }

    private void NavigateToCourse(int courseId)
    {
        Navigation.NavigateTo($"/portal/course/{courseId}");
    }

    private void ToggleDropdown(int courseId)
    {
        showDropdownFor = showDropdownFor == courseId ? null : courseId;
    }

    private async Task DeregisterCourse(int courseId)
    {
        isDeregistering = true;
        deregisteringCourseId = courseId;
        showDropdownFor = null;
        StateHasChanged();

        try
        {
            var success = await EnrollmentService.UnenrollFromCourseAsync(courseId);
            if (success)
            {
                // Reload courses data after successful deregistration
                await LoadCoursesData();
                ApplyFilter();
            }
        }
        finally
        {
            isDeregistering = false;
            deregisteringCourseId = null;
            StateHasChanged();
        }
    }
}