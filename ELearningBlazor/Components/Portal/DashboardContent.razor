@using ELearningBlazor.Services
@using ELearningBlazor.Models
@using ELearningBlazor.Utils
@inject IAuthService AuthService
@inject ICourseService CourseService
@inject IEnrollmentService EnrollmentService
@inject NavigationManager Navigation

<!-- Stats Grid -->
<div class="max-w-7xl mx-auto">
    <div class="grid grid-cols-2 gap-3 md:grid-cols-4 md:gap-4">
    <!-- Total Courses -->
    <div class="rounded-lg border border-gray-200 bg-white p-4 shadow-sm dark:border-gray-800 dark:bg-gray-900">
        <div class="flex h-8 w-8 items-center justify-center rounded-lg bg-blue-100 dark:bg-blue-900/20">
            <svg class="h-4 w-4 text-blue-600 dark:text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.746 0 3.332.477 4.5 1.253v13C19.832 18.477 18.246 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"></path>
            </svg>
        </div>

        <div class="mt-3">
            <h4 class="text-xl font-bold text-gray-900 dark:text-white">
                @enrolledCourses.Count
            </h4>
            <span class="text-xs font-medium text-gray-500 dark:text-gray-400">Enrolled Courses</span>
        </div>
    </div>

    <!-- Average Progress -->
    <div class="rounded-lg border border-gray-200 bg-white p-4 shadow-sm dark:border-gray-800 dark:bg-gray-900">
        <div class="flex h-8 w-8 items-center justify-center rounded-lg bg-green-100 dark:bg-green-900/20">
            <svg class="h-4 w-4 text-green-600 dark:text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
            </svg>
        </div>

        <div class="mt-3">
            <h4 class="text-xl font-bold text-gray-900 dark:text-white">
                @($"{averageProgress:F0}")%
            </h4>
            <span class="text-xs font-medium text-gray-500 dark:text-gray-400">Avg Progress</span>
        </div>
    </div>

    <!-- Study Streak -->
    <div class="rounded-lg border border-gray-200 bg-white p-4 shadow-sm dark:border-gray-800 dark:bg-gray-900">
        <div class="flex h-8 w-8 items-center justify-center rounded-lg bg-orange-100 dark:bg-orange-900/20">
            <svg class="h-4 w-4 text-orange-600 dark:text-orange-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 18.657A8 8 0 016.343 7.343S7 9 9 10c0-2 .5-5 2.986-7C14 5 16.09 5.777 17.656 7.343A7.975 7.975 0 0120 13a7.975 7.975 0 01-2.343 5.657z"></path>
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.879 16.121A3 3 0 1012.015 11L11 14H9c0 .768.293 1.536.879 2.121z"></path>
            </svg>
        </div>

        <div class="mt-3">
            <h4 class="text-xl font-bold text-gray-900 dark:text-white">
                @studyStreak
            </h4>
            <span class="text-xs font-medium text-gray-500 dark:text-gray-400">Day Streak</span>
        </div>
    </div>

    <!-- Completed Courses -->
    <div class="rounded-lg border border-gray-200 bg-white p-4 shadow-sm dark:border-gray-800 dark:bg-gray-900">
        <div class="flex h-8 w-8 items-center justify-center rounded-lg bg-purple-100 dark:bg-purple-900/20">
            <svg class="h-4 w-4 text-purple-600 dark:text-purple-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
        </div>

        <div class="mt-3">
            <h4 class="text-xl font-bold text-gray-900 dark:text-white">
                @completedCourses
            </h4>
            <span class="text-xs font-medium text-gray-500 dark:text-gray-400">Completed</span>
        </div>
    </div>
    </div>
</div>

<!-- Main Content Grid -->
<div class="max-w-7xl mx-auto mt-6">
    <!-- Continue Learning - Full Width -->
    <div class="w-full">
        <div class="rounded-lg border border-gray-200 bg-white p-4 shadow-sm dark:border-gray-800 dark:bg-gray-900">
            <div class="mb-4 flex items-center justify-between">
                <div>
                    <h3 class="text-lg font-bold text-gray-900 dark:text-white">Continue Learning</h3>
                    <p class="text-xs text-gray-500 dark:text-gray-400">Pick up where you left off</p>
                </div>
                <button @onclick="GoToMyCourses" class="flex items-center gap-2 rounded-lg border border-gray-200 px-3 py-1.5 text-xs font-medium text-gray-700 hover:bg-gray-50 dark:border-gray-700 dark:text-gray-300 dark:hover:bg-gray-800">
                    View All
                    <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7l5 5m0 0l-5 5m5-5H6"></path>
                    </svg>
                </button>
            </div>

            <div class="space-y-3">
                @if (recentCourses.Any())
                {
                    @foreach (var courseInfo in recentCourses.Take(3))
                    {
                        var course = enrolledCourses.FirstOrDefault(c => c.Id == courseInfo.CourseId);

                        @if (course != null)
                        {
                            <div class="flex items-center gap-3 rounded-lg border border-gray-100 p-3 hover:bg-gray-50 dark:border-gray-700 dark:hover:bg-gray-800/50">
                                <div class="flex-shrink-0">
                                    <img src="@ImageHelper.GetImagePath(course.ImgSrc)"
                                         alt="@course.Heading"
                                         class="h-12 w-12 rounded-lg object-cover" />
                                </div>

                                <div class="flex-1 min-w-0">
                                    <h4 class="truncate text-base font-semibold text-gray-900 dark:text-white">@course.Heading</h4>
                                    <p class="text-xs text-gray-500 dark:text-gray-400">@course.Name</p>

                                    <div class="mt-2 flex items-center gap-2">
                                        <div class="flex-1 bg-gray-200 rounded-full h-1.5 dark:bg-gray-700">
                                            <div class="bg-blue-600 h-1.5 rounded-full transition-all duration-300 dark:bg-blue-500"
                                                 style="width: @(courseInfo.Progress)%"></div>
                                        </div>
                                        <span class="text-xs font-medium text-gray-700 dark:text-gray-300">@($"{courseInfo.Progress:F0}")%</span>
                                    </div>
                                </div>

                                <div class="flex-shrink-0">
                                    <button @onclick="@(() => NavigateToCourseDetails(course.Id))" class="rounded-lg bg-blue-600 px-3 py-1.5 text-xs font-medium text-white hover:bg-blue-700 dark:bg-blue-500 dark:hover:bg-blue-600">
                                        Continue
                                    </button>
                                </div>
                            </div>
                        }
                    }
                }
                else
                {
                    <div class="flex flex-col items-center justify-center py-12 text-center">
                        <div class="mx-auto flex h-12 w-12 items-center justify-center rounded-xl bg-gray-100 dark:bg-gray-800">
                            <svg class="h-6 w-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.746 0 3.332.477 4.5 1.253v13C19.832 18.477 18.246 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"></path>
                            </svg>
                        </div>
                        <h3 class="mt-4 text-lg font-semibold text-gray-900 dark:text-white">No courses in progress</h3>
                        <p class="mt-2 text-sm text-gray-500 dark:text-gray-400">Start learning by enrolling in a course!</p>
                        <button @onclick="GoToBrowseCourses" class="mt-4 rounded-lg bg-blue-600 px-4 py-2 text-sm font-medium text-white hover:bg-blue-700">
                            Browse Courses
                        </button>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private List<Course> enrolledCourses = new();
    private List<EnrolledCourse> recentCourses = new();
    private double averageProgress = 0;
    private int studyStreak = 0;
    private int completedCourses = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadDashboardData();
    }

    private async Task LoadDashboardData()
    {
        if (AuthService.CurrentUser == null) return;

        // Get enrollments from API
        recentCourses = await EnrollmentService.GetMyEnrollmentsAsync();

        // Get course details for enrolled courses
        enrolledCourses = new List<Course>();
        foreach (var enrollment in recentCourses)
        {
            var course = await CourseService.GetCourseByIdAsync(enrollment.CourseId);
            if (course != null)
            {
                enrolledCourses.Add(course);
            }
        }

        averageProgress = recentCourses.Any() ? recentCourses.Average(ec => ec.Progress) : 0;
        completedCourses = recentCourses.Count(ec => ec.Progress >= 100);
    }

    private void NavigateToCourseDetails(int courseId)
    {
        Navigation.NavigateTo($"/portal/course/{courseId}");
    }

    private void GoToMyCourses()
    {
        OnSwitchToMyCourses.InvokeAsync();
    }

    private void GoToBrowseCourses()
    {
        OnSwitchToBrowseCourses.InvokeAsync();
    }

    [Parameter] public EventCallback OnSwitchToMyCourses { get; set; }
    [Parameter] public EventCallback OnSwitchToBrowseCourses { get; set; }
}