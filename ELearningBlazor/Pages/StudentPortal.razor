@page "/portal"
@using ELearningBlazor.Services
@using ELearningBlazor.Models
@using ELearningBlazor.Utils
@using ELearningBlazor.Components.Portal
@inject AuthService AuthService
@inject NavigationManager Navigation
@implements IDisposable

<PageTitle>Student Portal - eLearning</PageTitle>

@if (!AuthService.IsAuthenticated)
{
    <div></div>
}
else
{
    <div class="flex h-screen flex-col overflow-hidden">
        <!-- Header -->
        <header class="sticky top-0 z-30 flex w-full bg-white border-b border-gray-200 dark:bg-gray-900 dark:border-gray-700">
            <div class="flex flex-grow items-center justify-between px-4 py-3 md:px-6">
                <!-- Logo Section -->
                <div class="flex items-center gap-3">
                    <div class="flex h-8 w-8 items-center justify-center rounded-lg bg-gradient-to-br from-blue-600 to-indigo-600">
                        <span class="text-sm font-bold text-white">E</span>
                    </div>
                    <div>
                        <h2 class="text-base font-bold text-gray-800 dark:text-white">eLearning</h2>
                        <p class="text-xs text-gray-500 dark:text-gray-400">Student Portal</p>
                    </div>
                </div>

                <!-- Spacer -->
                <div class="hidden sm:block"></div>

                <!-- Right side -->
                <div class="flex items-center gap-3">
                    <!-- Mobile menu button -->
                    <button @onclick="ToggleSidebar" class="lg:hidden">
                        <svg class="h-5 w-5 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
                        </svg>
                    </button>

                    <!-- Search (Desktop) -->
                    <div class="relative hidden lg:block">
                        <input type="text"
                               placeholder="Search courses..."
                               class="w-full max-w-[250px] rounded-lg border border-gray-200 bg-transparent py-2 pl-8 pr-4 text-gray-900 focus:border-blue-500 focus:outline-none focus:ring-2 focus:ring-blue-500/20 dark:border-gray-700 dark:text-white" />
                        <svg class="absolute left-2 top-1/2 h-4 w-4 -translate-y-1/2 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                        </svg>
                    </div>

                    <!-- User Menu -->
                    <div class="relative">
                        <button @onclick="ToggleUserDropdown"
                                class="flex items-center gap-2 rounded-lg px-2 py-1.5 hover:bg-gray-100 dark:hover:bg-gray-800">
                            <div class="h-8 w-8 rounded-full bg-gradient-to-br from-blue-600 to-indigo-600 flex items-center justify-center text-white text-sm font-semibold">
                                @GetUserInitials(AuthService.CurrentUser.Name)
                            </div>
                            <span class="hidden text-sm font-medium text-gray-900 dark:text-white md:block">@GetFirstName(AuthService.CurrentUser.Name)</span>
                            <svg class="h-4 w-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                            </svg>
                        </button>

                        @if (showUserDropdown)
                        {
                            <div class="absolute right-0 top-full z-50 mt-2 w-56 rounded-xl border border-gray-200 bg-white p-2 shadow-lg dark:border-gray-700 dark:bg-gray-900">
                                <div class="rounded-lg bg-gray-50 p-3 dark:bg-gray-800">
                                    <p class="text-sm font-medium text-gray-900 dark:text-white">@AuthService.CurrentUser.Name</p>
                                    <p class="text-xs text-gray-500 dark:text-gray-400">@AuthService.CurrentUser.Email</p>
                                </div>
                                <div class="mt-2 space-y-1">
                                    <button @onclick="HandleLogout"
                                            class="flex w-full items-center gap-2 rounded-lg px-3 py-2 text-sm text-red-600 hover:bg-red-50 dark:text-red-400 dark:hover:bg-red-900/20">
                                        <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1"></path>
                                        </svg>
                                        Logout
                                    </button>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </header>

        <div class="flex flex-1 overflow-hidden">
            <!-- Sidebar -->
            <aside class="@($"fixed left-0 top-16 z-40 h-[calc(100vh-4rem)] w-64 -translate-x-full transition-transform lg:relative lg:top-0 lg:h-full lg:translate-x-0{(sidebarOpen ? " translate-x-0" : "")}") bg-white border-r border-gray-200 dark:border-gray-700 dark:bg-gray-900">
                <div class="flex h-full flex-col overflow-y-auto px-3 py-3">
                    <!-- Navigation Menu -->
                    <nav class="space-y-2">
                        <div class="px-2">
                            <p class="mb-2 text-xs font-semibold uppercase tracking-wider text-gray-400 dark:text-gray-500">LEARNING</p>
                        </div>

                        <!-- Dashboard -->
                        <button @onclick="@(() => SetActiveTab("dashboard"))"
                                class="@GetNavLinkClass("dashboard")">
                            <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2H5a2 2 0 00-2-2z"></path>
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 5a2 2 0 012-2h4a2 2 0 012 2v6a2 2 0 01-2 2H10a2 2 0 01-2-2V5z"></path>
                            </svg>
                            <span>Dashboard</span>
                        </button>

                        <!-- My Courses -->
                        <button @onclick="@(() => SetActiveTab("courses"))"
                                class="@GetNavLinkClass("courses")">
                            <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.746 0 3.332.477 4.5 1.253v13C19.832 18.477 18.246 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"></path>
                            </svg>
                            <span>My Courses</span>
                        </button>

                        <!-- Browse Courses -->
                        <button @onclick="@(() => SetActiveTab("browse"))"
                                class="@GetNavLinkClass("browse")">
                            <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                            </svg>
                            <span>Browse Courses</span>
                        </button>

                        <!-- Divider -->
                        <div class="my-6 border-t border-gray-200 dark:border-gray-700"></div>

                        <div class="px-2">
                            <p class="mb-2 text-xs font-semibold uppercase tracking-wider text-gray-400 dark:text-gray-500">ACCOUNT</p>
                        </div>

                        <!-- Settings -->
                        <button class="group relative flex w-full items-center gap-3 rounded-lg px-3 py-2.5 text-sm font-medium text-gray-600 hover:bg-gray-100 hover:text-gray-900 dark:text-gray-300 dark:hover:bg-gray-800 dark:hover:text-white">
                            <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"></path>
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                            </svg>
                            <span>Settings</span>
                        </button>

                        <!-- Logout -->
                        <button @onclick="HandleLogout"
                                class="group relative flex w-full items-center gap-3 rounded-lg px-3 py-2.5 text-sm font-medium text-red-600 hover:bg-red-50 hover:text-red-700 dark:text-red-400 dark:hover:bg-red-900/20">
                            <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1"></path>
                            </svg>
                            <span>Logout</span>
                        </button>
                    </nav>

                    <!-- User Profile Section at Bottom -->
                    <div class="mt-auto">
                        <div class="rounded-xl border border-gray-200 bg-gray-50 p-4 dark:border-gray-700 dark:bg-gray-800">
                            <div class="flex items-center gap-3">
                                <div class="flex h-10 w-10 items-center justify-center rounded-full bg-gradient-to-br from-blue-600 to-indigo-600 text-white font-semibold">
                                    @GetUserInitials(AuthService.CurrentUser.Name)
                                </div>
                                <div class="flex-1 min-w-0">
                                    <p class="truncate text-sm font-medium text-gray-900 dark:text-white">@AuthService.CurrentUser.Name</p>
                                    <p class="truncate text-xs text-gray-500 dark:text-gray-400">@AuthService.CurrentUser.Email</p>
                                </div>
                            </div>
                            <div class="mt-3 rounded-lg bg-blue-50 p-3 dark:bg-blue-900/20">
                                <p class="text-xs font-medium text-blue-900 dark:text-blue-200">Member since</p>
                                <p class="text-xs text-blue-700 dark:text-blue-300">@AuthService.CurrentUser.JoinDate.ToString("MMM yyyy")</p>
                            </div>
                        </div>
                    </div>
                </div>
            </aside>

            <!-- Main Content -->
            <div class="relative flex flex-1 flex-col overflow-y-auto overflow-x-hidden lg:ml-64">
                <!-- Main Content Area -->
                <main class="flex-1 p-4 md:p-6">
                    @if (activeTab == "dashboard")
                    {
                        <DashboardContent />
                    }
                    else if (activeTab == "courses")
                    {
                        <MyCoursesContent />
                    }
                    else if (activeTab == "browse")
                    {
                        <BrowseCoursesContent />
                    }
                </main>
            </div>
        </div>

        <!-- Mobile Sidebar Overlay -->
        @if (sidebarOpen)
        {
            <div @onclick="ToggleSidebar" class="fixed inset-0 z-30 bg-black bg-opacity-50 lg:hidden"></div>
        }
    </div>
}

@code {
    private string activeTab = "dashboard";
    private bool sidebarOpen = false;
    private bool showUserDropdown = false;

    protected override void OnInitialized()
    {
        AuthService.OnAuthStateChanged += StateHasChanged;

        // Redirect if not authenticated
        if (!AuthService.IsAuthenticated)
        {
            Navigation.NavigateTo("/");
        }
    }

    public void Dispose()
    {
        AuthService.OnAuthStateChanged -= StateHasChanged;
    }

    private void SetActiveTab(string tab)
    {
        activeTab = tab;
        sidebarOpen = false; // Close mobile sidebar when navigating
    }

    private void ToggleSidebar()
    {
        sidebarOpen = !sidebarOpen;
    }

    private void ToggleUserDropdown()
    {
        showUserDropdown = !showUserDropdown;
    }

    private string GetNavLinkClass(string tab)
    {
        var baseClass = "group relative flex w-full items-center gap-3 rounded-lg px-3 py-2.5 text-sm font-medium transition-colors";

        if (activeTab == tab)
        {
            return $"{baseClass} bg-blue-600 text-white shadow-sm";
        }
        else
        {
            return $"{baseClass} text-gray-600 hover:bg-gray-100 hover:text-gray-900 dark:text-gray-300 dark:hover:bg-gray-800 dark:hover:text-white";
        }
    }

    private string GetPageTitle()
    {
        return activeTab switch
        {
            "dashboard" => "Learning Dashboard",
            "courses" => "My Courses",
            "browse" => "Course Catalog",
            _ => "Learning Dashboard"
        };
    }

    private string GetPageSubtitle()
    {
        return activeTab switch
        {
            "dashboard" => "Track your learning progress and achievements",
            "courses" => "Manage your enrolled courses and continue learning",
            "browse" => "Discover new courses and expand your knowledge",
            _ => "Track your learning progress and achievements"
        };
    }

    private async Task HandleLogout()
    {
        showUserDropdown = false;
        await AuthService.LogoutAsync();
        Navigation.NavigateTo("/");
    }

    private string GetUserInitials(string name)
    {
        if (string.IsNullOrWhiteSpace(name))
            return "U";

        var parts = name.Split(' ', StringSplitOptions.RemoveEmptyEntries);
        if (parts.Length == 1)
            return parts[0][0].ToString().ToUpper();

        return $"{parts[0][0]}{parts[^1][0]}".ToUpper();
    }

    private string GetFirstName(string name)
    {
        if (string.IsNullOrWhiteSpace(name))
            return "Student";

        var parts = name.Split(' ', StringSplitOptions.RemoveEmptyEntries);
        return parts[0];
    }
}